RELATÓRIO

1. Termo de compromisso

Os membros do grupo afirmam que todo o código desenvolvido para este
trabalho é de autoria própria.  Exceto pelo material listado no item 3
deste relatório, os membros do grupo afirmam não ter copiado
material da Internet nem obtiveram código de terceiros.


2. Membros do grupo e alocação de esforço

Frederico Ribeiro Queiroz <fredqueirozbh@gmail.com> 50%
Icaro Kened Torres Neto <torres.icaro@hotmail.com> 50%


3. Referências bibliográficas

/*Task1*/
https://www.geeksforgeeks.org/chdir-in-c-language-with-examples/
https://linux.die.net/man/3/chdir
https://www.tutorialspoint.com/c_standard_library/c_function_strerror.htm

/*Task2*/
https://www.geeksforgeeks.org/exec-family-of-functions-in-c/
https://linux.die.net/man/3/exec

/*Task3*/
https://www.geeksforgeeks.org/input-output-system-calls-c-create-open-close-read-write/
https://linux.die.net/man/3/open
https://www.geeksforgeeks.org/dup-dup2-linux-system-call/
https://linux.die.net/man/2/dup2
https://www.quora.com/What-is-the-file-descriptor-What-are-STDIN_FILENO-STDOUT_FILENO-and-STDERR_FILENO

/*Task4*/
https://www.geeksforgeeks.org/fork-system-call/
https://www.geeksforgeeks.org/c-program-demonstrate-fork-and-pipe/
https://linux.die.net/man/2/pipe
https://linux.die.net/man/2/close
https://www.geeksforgeeks.org/fork-system-call/

4. Estruturas de dados

Descreva e justifique as estruturas de dados e algoritmos utilizados
em sua solução.

/*Task1*/
A funcao chdir() retora:
    0 em caso de sucesso 
    -1 em caso de de erro (define errno de acordo com o tipo de erro)

A função strerror(int errno) procura em uma matriz interna o número do erro errno e retorna um ponteiro para uma sequência de mensagens de erro.

Para reportar o erro buscou-se utilizar uma estrutura de mensagem semelhante ao do interpretador Bash linux.
A mensagem a ser exibida tem a seguinte estrutura:
    myshell: cd: <caminho do diretório> <mensagem de erro>


/*Task2*/
Para executar comandos simples foi utilizada a função "int execvp(const char *file, char *const argv[])".
Chamada da função: execvp(ecmd->argv[0], ecmd->argv)
O execvp() procurara pela localização do comando "ecmd->argv[0]" entre os diretórios especificados na variável de ambiente PATH,
passando os argumentos contidos no array "ecmd->argv".


/*Task3*/
Para implementar comandos de redirecionamento utilizamos de duas funções:

int open(const char *path, int oflag, int mode, ...): usado para abrir o arquivo para leitura, gravação ou ambos.

int dup2(int oldfd, int newfd): cria uma copia newfd do file descriptor oldfd.

/*Task4*/
Algoritmos utilizados:

int pipe(int pipefd[2]): cria um canal de dados unidirecional que pode ser utilizado para a comunicação entre processos

int close(int fd): fecha um file descriptor 

int fork1(void) -> fork(): 
Usada para criar um novo processo (processo filho), que é executado simultaneamente com o processo que faz a chamada (processo pai). 
